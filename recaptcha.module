<?php

/**
 * @file
 * Verifies if user is a human without necessity to solve a CAPTCHA.
 */

require_once dirname(__FILE__) . '/recaptcha-php/src/ReCaptcha/ReCaptcha.php';
require_once dirname(__FILE__) . '/recaptcha-php/src/ReCaptcha/RequestMethod.php';
require_once dirname(__FILE__) . '/recaptcha-php/src/ReCaptcha/RequestParameters.php';
require_once dirname(__FILE__) . '/recaptcha-php/src/ReCaptcha/Response.php';
require_once dirname(__FILE__) . '/recaptcha-php/src/ReCaptcha/RequestMethod/Post.php';
require_once dirname(__FILE__) . '/recaptcha-php/src/ReCaptcha/RequestMethod/Socket.php';
require_once dirname(__FILE__) . '/recaptcha-php/src/ReCaptcha/RequestMethod/SocketPost.php';

/**
 * Implementation of hook_help().
 */
function recaptcha_help($path, $arg) {
  switch ($path) {
    case 'admin/user/captcha/recaptcha':
      return t('Google <a href="@url">reCAPTCHA</a> is a free service to protect your website from spam and abuse. reCAPTCHA uses an advanced risk analysis engine and adaptive CAPTCHAs to keep automated software from engaging in abusive activities on your site. It does this while letting your valid users pass through with ease.', array('@url' => 'https://www.google.com/recaptcha'));
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function recaptcha_menu() {
  $items['admin/user/captcha/recaptcha'] = array(
    'title' => 'reCAPTCHA',
    'description' => 'Administer the Google No CAPTCHA reCAPTCHA web service.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recaptcha_admin_settings'),
    'access arguments' => array('administer recaptcha'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'recaptcha.admin.inc',
    'weight' => 1,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function recaptcha_perm() {
  return array('administer recaptcha');
}

/**
 * Implementation of hook_captcha().
 */
function recaptcha_captcha($op, $captcha_type = '') {
  global $language;

  switch ($op) {
    case 'list':
      return array('reCAPTCHA');

    case 'generate':
      $captcha = array();
      if ($captcha_type == 'reCAPTCHA') {
        $recaptcha_site_key = variable_get('recaptcha_site_key', '');

        // Test if captcha can be used, falling back to Math if it is not
        // configured, the library won't load, or the server is down.
        if (!$recaptcha_site_key) {
          $args = func_get_args();
          return captcha_captcha('generate', 'Math', $args);
        }
        // Create the form. Captcha requires TRUE to be returned in solution.
        $captcha['solution'] = TRUE;
        $captcha['captcha_validate'] = 'recaptcha_captcha_validation';
        $captcha['form']['captcha_response'] = array(
          '#type' => 'hidden',
          '#value' => 'Google no captcha',
        );

        $noscript = '';
        if (variable_get('recaptcha_noscript', 0)) {
          // Build <noscript> html code.
          $noscript .= '<noscript>';
          $noscript .= '  <div style="width: 302px; height: 352px;">';
          $noscript .= '    <div style="width: 302px; height: 352px; position: relative;">';
          $noscript .= '      <div style="width: 302px; height: 352px; position: absolute;">';
          $noscript .= '        <iframe src="' . url('https://www.google.com/recaptcha/api/fallback', array('query' => array('k' => $recaptcha_site_key, 'hl' => $language->language), 'absolute' => TRUE)) . '" frameborder="0" scrolling="no" style="width: 302px; height:352px; border-style: none;"></iframe>';
          $noscript .= '      </div>';
          $noscript .= '      <div style="width: 250px; height: 80px; position: absolute; border-style: none; bottom: 21px; left: 25px; margin: 0px; padding: 0px; right: 25px;">';
          $noscript .= '        <textarea id="g-recaptcha-response" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 80px; border: 1px solid #c1c1c1; margin: 0px; padding: 0px; resize: none;" value=""></textarea>';
          $noscript .= '      </div>';
          $noscript .= '    </div>';
          $noscript .= '  </div>';
          $noscript .= '</noscript>';
        }

        $attributes = array(
          'class' => 'g-recaptcha',
          'data-sitekey' => $recaptcha_site_key,
          'data-theme' => variable_get('recaptcha_theme', 'light'),
          'data-type' => variable_get('recaptcha_type', 'image'),
          'data-tabindex' => variable_get('recaptcha_tabindex', 0),
        );
        // Filter out empty tabindex.
        $attributes = array_filter($attributes);

        $captcha['form']['recaptcha_widget'] = array(
          '#markup' => '<div' . drupal_attributes($attributes) . '></div>' . $noscript,
        );

        // D6 does not support "async" and "external" in drupal_add_js().
        drupal_set_html_head('<script type="text/javascript" src="' . url('https://www.google.com/recaptcha/api.js', array('query' => array('hl' => $language->language), 'absolute' => TRUE)) . '" async defer></script>');
      }
      return $captcha;
  }
}

/**
 * CAPTCHA Callback; Validates the reCAPTCHA code.
 */
function recaptcha_captcha_validation($solution, $response, $element, $form_state) {
  $recaptcha_secret_key = variable_get('recaptcha_secret_key', '');
  if (empty($_POST['g-recaptcha-response']) || empty($recaptcha_secret_key)) {
    return FALSE;
  }

  // Try to workaround issues with locked down web servers.
  if (!ini_get('allow_url_fopen')) {
    // PHP allow_url_fopen = Off
    $recaptcha = new \ReCaptcha\ReCaptcha($recaptcha_secret_key, new \ReCaptcha\RequestMethod\SocketPost());
  }
  else {
    // PHP allow_url_fopen = On (default)
    $recaptcha = new \ReCaptcha\ReCaptcha($recaptcha_secret_key);
  }
  $resp = $recaptcha->verify(
    $_POST['g-recaptcha-response'],
    ip_address()
  );

  if ($resp->isSuccess()) {
    // Verified!
    return TRUE;
  }
  else {
    // Error code reference, https://developers.google.com/recaptcha/docs/verify
    $error_codes = array(
      'missing-input-secret' => t('The secret parameter is missing.'),
      'invalid-input-secret' => t('The secret parameter is invalid or malformed.'),
      'missing-input-response' => t('The response parameter is missing.'),
      'invalid-input-response' => t('The response parameter is invalid or malformed.'),
    );
    foreach ($resp->getErrorCodes() as $code) {
      watchdog('reCAPTCHA web service', '@error', array('@error' => $error_codes[$code]), WATCHDOG_ERROR);
    }
  }
  return FALSE;
}
