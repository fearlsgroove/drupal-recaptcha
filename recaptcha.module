<?php
/* $Id$ */

/**
* Display help and module information
* @param section which section of the site we're displaying help
* @return help text for section
*/
function recaptcha_help($section = '') {
  $output = '';
  switch ($section) {
    case 'admin/modules#name':
      $output .= t('reCAPTCHA');
      break;
    case 'admin/modules#description':
      $output .= t('Uses the <a href="%url" target="_blank">reCAPTCHA</a> web service as a CAPTCHA.', array('%url' => url('http://www.recaptcha.net')));
      break;
    case 'admin/help#recaptcha':
      $output .= '<p>'. t('Uses the <a href="%url" target="_blank">ReCAPTCHA web service</a> to protect your site from spammers while helping to scan books.',
        array('%url' => url('http://www.recaptcha.net'))) .'</p><h3>'. t('Configuration') .'</h3><p>'.
        t('The settings associated with reCAPTCHA can be found in the <a href="%recaptchatab">reCAPTCHA settings</a>. You must set your public and private reCAPTCHA keys in order to use the module. Once the public and private keys are set, visit the <a href="%captchasettings">CAPTCHA settings</a>, where you can choose where reCAPTCHA should be displayed.',
        array('%recaptchatab' => url('admin/settings/recaptcha'), '%captchasettings' => url('admin/settings/captcha'))) .'</p>';
      break;
  }
  return $output;
} // function recaptcha_help

/**
* Valid permissions for this module
* @return array An array of valid permissions for the onthisdate module
*/
function recaptcha_perm() {
  return array('administer recaptcha');
} // function recaptcha_perm()


/**
 * Implementation of hook_settings().
 */
function recaptcha_settings() {
  require_once('recaptcha.inc');
  @(include_once('recaptcha/recaptchalib.php')) or _recaptcha_library_not_found();
  $form = array();
  $form['recaptcha_public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public Key'),
    '#default_value' => variable_get('recaptcha_public_key', ''),
    '#maxlength' => 40,
    '#description' => t('The public key given to you when you <a href="%url" target="_blank">registered at reCAPTCHA.net</a>.', array('%url' => check_url(url(recaptcha_get_signup_url($_SERVER['SERVER_NAME'], variable_get('site_name', '')))))),
   );
  $form['recaptcha_private_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Private Key'),
    '#default_value' => variable_get('recaptcha_private_key', ''),
    '#maxlength' => 40,
    '#description' => t('The private key given to you when you <a href="%url" target="_blank">registered at reCAPTCHA.net</a>.', array('%url' => check_url(url(recaptcha_get_signup_url($_SERVER['SERVER_NAME'], variable_get('site_name', '')))))),
   );
  $form['recaptcha_form_weight'] = array(
    '#type' => 'weight',
    '#title' => t('reCAPTCHA weight'),
    '#default_value' => variable_get('recaptcha_form_weight', 1),
    '#delta' => 15,
    '#description' => t('Weight of the reCAPTCHA challenge within a form that uses it.'),
  );
  $form['recaptcha_error_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Error Message'),
    '#default_value' => variable_get('recaptcha_error_message', t('The words you entered were incorrect.')),
    '#description' => t('The error message that will be displayed if the user enters an incorrect reCAPTCHA response.'),
  );
  $form['recaptcha_secure_connection'] = array(
    '#type' => 'checkbox',
    '#title' => t('Secure Connection'),
    '#default_value' => variable_get('recaptcha_secure_connection', FALSE),
    '#description' => t('Connect to the reCAPTCHA server using a secure connection.'),
  );
  $form['recaptcha_theme_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Theme Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['recaptcha_theme_settings']['recaptcha_theme'] = array(
    '#type' => 'select',
    '#title' => t('Theme'),
    '#description' => t('Defines which theme to use for reCAPTCHA.'),
    '#options' => array(
      'red' => t('Red'),
      'white' => t('White'),
      'blackglass' => t('Black Glass'),
    ),
    '#default_value' => variable_get('recaptcha_theme', 'red'),
    '#required' => TRUE,
  );
  $form['recaptcha_theme_settings']['recaptcha_tabindex'] = array(
    '#type' => 'textfield',
    '#title' => t('Tab Index'),
    '#description' => t('Sets a <a href="%tabindex" target="_blank">tabindex</a> for the reCAPTCHA text box. If other elements in the form use a tabindex, this should be set so that navigation is easier for the user.', array('%tabindex' => 'http://www.w3.org/TR/html4/interact/forms.html#adef-tabindex')),
    '#default_value' => variable_get('recaptcha_tabindex', ''),
    '#validate' => array('recaptcha_tabindex_validate' => array()),
    '#size' => 4,
  );

  return $form;
} // function recaptcha_settings

/**
 * The validation on the reCAPTCHA administration settings
 */
function recaptcha_tabindex_validate($field) {
  if (!empty($field['#value']) && !is_numeric($field['#value'])) {
    form_set_error('recaptcha_tabindex', t('The Tab Index must be an integer.'));
  }
  return $field;
}

/**
 * reCAPTCHA implementation of hook_captchachallenge
 */
function recaptcha_captchachallenge(&$form) {  
  global $_recaptcha_jsadded;
  require_once('recaptcha.inc');
  @(include_once('recaptcha/recaptchalib.php')) or _recaptcha_library_not_found();
  // Check if reCAPTCHA is available and show Math if not
  $connect = @fsockopen('api-verify.recaptcha.net', 80);
  if (!$connect) {
    captcha_captchachallenge(&$form, &$_SESSION['captcha']);
    return $form;
  }
  fclose($connect); // close connection

  $recaptcha_secure_connection = variable_get('recaptcha_secure_connection', FALSE);
  $recaptcha_theme = variable_get('recaptcha_theme', 'red');
  $recaptcha_tabindex = variable_get('recaptcha_tabindex', NULL);
  theme_stylesheet_import(drupal_get_path('module', 'recaptcha') .'/recaptcha.css');
  if (!isset($_recaptcha_jsadded)) {
    $_recaptcha_jsadded = TRUE;
    $js = "<script type='text/javascript'>var RecaptchaOptions = {theme : '$recaptcha_theme'";
    if (!empty($recaptcha_tabindex)) {
      $js .= ', tabindex : '. $recaptcha_tabindex;
    }
    drupal_set_html_head($js .'};</script>');
  }

  $form['captcha_response'] = array(
    '#type' => 'item',
    '#title' => t('Are you a person?'),
    '#description' => recaptcha_get_html(variable_get('recaptcha_public_key', ''), NULL, $recaptcha_secure_connection),
    '#weight' => variable_get('recaptcha_form_weight', 1),
    '#validate' => array('_captcha_validate' => array()),
    '#required' => TRUE,
    );
  return $form;
} // function recaptcha_captchachallenge

/**
 * reCAPTCHA implementation of hook_captchavalidate
 */
function recaptcha_captchavalidate(&$captcha_word, &$correct) {
  // if we've fallen back to math, this validation routine will be invoked regardless
  if (isset($_SESSION['captcha']) && $captcha_word != '') {
    captcha_captchavalidate(&$captcha_word, &$correct);
    return;
  }
  require_once('recaptcha.inc');
  @(include_once('recaptcha/recaptchalib.php')) or _recaptcha_library_not_found();
  $resp = recaptcha_check_answer(
    variable_get('recaptcha_private_key', ''),
      $_SERVER['REMOTE_ADDR'],
      $_POST['recaptcha_challenge_field'],
      $_POST['recaptcha_response_field']
    );
  if ($resp->is_valid) {
    $correct = TRUE;
  }
  else {
    if (isset($_POST['recaptcha_response_field'])) {
      form_set_error('captcha_response', check_plain(variable_get('recaptcha_error_message', t('The words you entered were incorrect.'))));
    }
    $correct = FALSE;
  }
}

